{
  "compileOnSave": false,
  "compilerOptions": {
    "module": "commonjs", // Определяет тип импорта кода в итоговом файле, прописанном в "outFile". Необходимо задавать при использовании опции "outFile".
    // "outFile": "./build/bundle.js", никогда не назначаем!11 сбивает outDir
    "outDir": "./build",

    "rootDir": "./src", // Путь до папки с которой надо начинать поиск входных файлов. Обычно корневая директория вычисляется по списку входных файлов. Данная опция необходима для проверки, что все найденные TypeScript-файлы находятся внутри корневой папки.
    "baseUrl": ".", // Путь до базовой папки для поиска не относительных путей до файлов.


    "alwaysStrict": true,
    "checkJs": true, // Сообщить об ошибках в .js-файлах? Используйте совместно с "allowJs".
    "downlevelIteration": true, // Обеспечьте полную поддержку итераций для for - in, ..., деструктуризации при настройке на ES5 или ES3?

    "noEmitOnError": true, // Не создавать итоговый файл, если во время компиляции произошла ошибка.

    "noUnusedLocals": true, // Показывать ошибку, если где-то найдены неиспользуемые локальные значения.
    "noUnusedParameters": true, // Показывать ошибку, если где-то найдены неиспользуемые параметры.
    "noImplicitUseStrict": false, // Не записывать 'use strict' в итоговый выходной файл?
    "pretty": true, // Окрашивать в терминале сообщения об ошибках.
    "removeComments": true, // Удалить все комментарии из итогового файла.
    "sourceMap": false, // Создавать ли соответствующие source map файлы ".map"?
    "strict": true, // ТРУ ТС
    "strictNullChecks": true, // Значения "null" и "undefined" могут быть присвоены только значениям данного типа и значениям только с типом "any"?
    "target": "ES2022", // Тип кода создаваемого итогового файла.
    "watch": true, // Запустить компилятор в режиме отслеживания изменений во входных файлах и их повторной компиляции?

    // Дополнительные настройки.
    "allowSyntheticDefaultImports": false, // Разрешить импортировать модули не имеющие внутри себя "import default"?
    "allowUnreachableCode": false, // Сообщить об ошибке в случае обнаружения кода, который никогда не будет выполнен?
    "allowUnusedLabels": false, // Не создавать сообщений об ошибках, если в коде найдены неиспользуемые метки label?
    "declaration": false, // Создавать ли соответствующие файлы ".d.ts"?
    "diagnostics": false, // Показывать ли диагностическую информацию?
    "disableSizeLimit": false, // Отключить ограничение размера в проекте JavaScript.
    "emitBOM": false, // Записывать ли UTF-8 Byte Order Mark (BOM) в начало итогового файла?

    "emitDecoratorMetadata": true, // Создавать метаданные для объявлений декораторов в исходном коде?
    "esModuleInterop": false, // Создать хелперы __importStar и __importDefault для обеспечения совместимости с экосистемой Babel и включить allowSyntheticDefaultImports для совместимости с системой типов.
    "experimentalDecorators": true, // Включить экспериментальную поддержку декораторов EcmaScript?

    "forceConsistentCasingInFileNames": false, // Запретить несогласованные ссылки на один и тот же файл?
    "inlineSources": false, // Помещать ли source в итоговый файл рядом с source map?
    "inlineSourceMap": false, // Помещать ли source map в итоговый файл, вместо того чтобы иметь отдельный файл с source map?
    "isolatedModules": false, // Обрабатывать каждый файл, как отдельный изолированный модуль.
    "listFiles": false, // Печатать ли имена файлов при компиляции?
    "listEmittedFiles": false, // Печатать список всех выходных файлов при компиляции. Требуется TypeScript версии 2.0 или новее.
    "maxNodeModuleJsDepth": 0, // Максимальная глубина поиска зависимостей внутри node_modules и загрузки файлов JavaScript. Применяется только вместе с заданной опцией "allowJs".
    "moduleResolution": "node",
    "newLine": "CRLF", // Определяет тип завершения строк в итоговом файле.
    "noEmit": false, // Не создавать итоговый файл.
    "noFallthroughCasesInSwitch": false, // Сообщить об ошибке в случае обнаружения проваливания в конструкции switch-case?
    "noImplicitAny": true, // Показывать ошибку, если где-то задан тип "any".
    "noImplicitThis": true, // Показывать ошибку на "this", если где-то задан тип "any".
    "noImplicitReturns": true, // Сообщить об ошибке, когда не все пути кода в функции возвращают значение?

    "noStrictGenericChecks": false, // Отключить строгую проверку типов джинериков в типах функций?

    "skipLibCheck": false, // Не проверять типы, заданные во всех файлах описания типов (*.d.ts)?
    "skipDefaultLibCheck": false, // Пропустить проверку типов из стандартной библиотеки по умолчанию?
    "suppressExcessPropertyErrors": false, // Подавлять избыточные проверки свойств для объектных литералов?
    "suppressImplicitAnyIndexErrors": false, // Подавлять "noImplicitAny" ошибки для индексирования объектов, не имеющих индексных подписей.
    "stripInternal": false, // Не создавать объявления для кода, который имеет аннотацию JSDoc /** @internal */.
    "strictFunctionTypes": false, // Отключить проверку бивариантных параметров для типов функций.
    "strictPropertyInitialization": true, // Убедитесь, что свойства класса, имеющие значения undefined, получают новые значения внутри конструктора.
    "traceResolution": false // Выводить в логи сообщения о нахождении путей до модулей.
  },

  // Вместе с компиляцией только конкретных исходных файлов можно компилировать только файлы в заданных папках, которые будут найдены через регулярные выражения, которые принимают только следующие значения:
  // - букву или цифру;
  // - * - ноль или более любых символов, не включая разделители директорий "/" и "\";
  // - ? - один любой символ, не включая разделители директорий "/" и "\";
  // - **/ - рекурсивно включить любую подпапку.
  // Если путь до папки заканчивается так "*" или так ".*", тогда в ней будут скомплированы все файлы с расширениями .ts, .tsx, .d.ts, а также .js и .jsx, если опция "allowJs" будет равна true.
  "include": [
    // Секция "include" позволяет скомпилировать все файлы, находящиеся в заданных папках.
    // Если секция "files" и секция "include" заданы вместе, то будут скомпилированы только файлы, перечисленные в обеих секциях.
    // Все файлы, на которые есть ссылки во включенных файлах из секции "files" и секции "include", также скомпилируются.
    "src/**/*"
  ],
  "exclude": [
    // Секция "exclude" позволяет исключить при компиляции определенные файлы, которые находятся в заданных папках секции "include" или в папках всего проекта, если секция "include" не задана.
    // Компилятор не будет учитывать перечисленные в секции "exclude" файлы TypeScript, которые находятся в папках из секции "include".
    // Однако файлы, заданные в секции "files" будут обязательно скомпилированы.
    // Если секция "exclude" не указана, то по умолчанию будут исключаться из компиляции все файлы из папок:
    // - node_modules,
    // - bower_components,
    // - jspm_packages,
    // - файлы из папки, указанной в опции компилятора "outDir".
    "src/**/*.spec.ts",
    "node_modules"
  ]
}
